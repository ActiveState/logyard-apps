---
# sieve configuration

# Message key is determined as "event.#{name}" where `name` is the 2nd
# level child. For instance, the event spec "process_start" under
# "supervisord" event group below corresponds to the message key
# "event.process_start".

# The two formats under the "__all__" group -- "error" and "warning"
# -- parse the default vcap_logger logging format, which is also used
# by the Go components.

# Event "format" will be used to render the event in Console's event log, and
# also the app log stream (`s logs`).

# How to add events?
# ==================
#
# Adding a *new* event requires modifying the sieve
# configuration:
#
#  * Edit, and copy this file to the VM.
#  * Run `kato config set --yaml logyard_sieve / < etc/sieve.yml`.
#  * Run `kato process restart logyard_sieve` on all nodes.
#  * Verify that your changes have taken effect using:
#      logyard-cli stream event

events:
  supervisord:
    process_start:
      substring: "entered RUNNING state"
      regex: '(\w+) entered RUNNING'
      sample: "INFO success: memcached_node entered RUNNING state, process has ..."
      format: "Process '$1' started on a node"
    process_stop:
      substring: "stopped"
      regex: 'stopped: (\w+) \((.+)\)'
      sample: 'INFO stopped: mysql_node (terminated by SIGKILL)'
      severity: WARNING
      format: "Process '$1' stopped on a node ($2)"
    process_exit:
      substring: "exited"
      regex: 'exited: (\w+) \((.+)\)'
      sample: 'INFO exited: dea (exit status 1; not expected)'
      severity: ERROR
      format: "Process '$1' crashed on a node ($2)"
  kato:
    kato_action:
      substring: 'INVOKE-ADMIN-ACTION'
      regex: 'INVOKE-ADMIN-ACTION (.+)'
      sample: '[info] (12339) INVOKE-ADMIN-ACTION {"command": "kato start","status": "succeeded"}'
      format: '{{.command}} ({{.status}})'
      handlertype: json
  nginx:
    nginx_error:
      substring: "error"
      regex: '\[error\] (.+)$'
      sample: '23:29:20 [error] 8474#0: *163529 connect() failed(111: Connection refused)'
      severity: ERROR
      format: "nginx error: $1"
  kernel:
    oom_killer:
      substring: "oom-killer"
      regex: '(\w+ invoked oom\-killer)'
      sample: '[21510.516563] uwsgi invoked oom-killer: gfp_mask=0x50'
      severity: WARNING
      format: "OOM action: $1"
  __all__:
    error:
      substring: ERROR
      regex: 'ERROR -- (.+?)(, data: .+)?$'
      sample: 'postgresql_gateway - pid=4340 tid=2e99 fid=bad6  ERROR -- Failed fetching handles: Errno::ETIMEDOUT'
      severity: ERROR
      format: '$1'
    warning:
      substring: WARN
      regex: 'WARN -- (.+?)(, data: .+)?$'
      sample: 'WARN -- Took 18.09s to process ps and du stats, data: foo'
      severity: WARNING
      format: '$1'
    timeline:
      substring: "TIMELINE"
      regex: 'INFO -- TIMELINE (.+?)(, data: .+)?$'
      sample: 'INFO -- TIMELINE {"event":"APP_DELETE", "app":{"id":1,"name":"foo"}, "user":{"id":1,"email":"foo@bar.com"}}, data: blah'
      handlertype: json
      format: '{{.message}}'
  filesystem_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  mongodb_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  postgresql_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  mysql_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  redis_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  memcached_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  rabbit_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
  harbor_node:
    service_provision:
      substring: "Successfully provisioned service"
      regex: '^\[[^\]]+\] (\w+) .+ Successfully provisioned service for request'
      sample: '[2012-11-01 07:30:51.290253] redis_node_1 - pid=23282 tid=d0cf fid=5280 DEBUG -- MaaS-Node: Successfully provisioned service for request {...}'
      format: 'Provisioned a new service on $1'
